// @ts-check

const { writeFileSync } = require('node:fs')
const { componentsList } = require('./get-component-list')
const render = require('json-templater/string')
const { resolve } = require('node:path')
const { EOL } = require('node:os')
const replace = require('replace-in-file')
const logger = require('./logger')

const COMPONENTS_OUTPUT_PATH = resolve(
  __dirname,
  './../dist/components/index.js',
)
const COMPONENTS_TYPE_PATH = resolve(
  __dirname,
  './../dist/components/index.d.ts',
)

const COMPONENTS_TEMPLATE = `/* Automatically generated by './build/build-components-entry.js' */

{{include}}
`

const COMPONENTS_IMPORT_TEMPLATE = `export { default as {{name}} } from '{{path}}'`

/**
 * @param {string} template
 * @param {string} importTemplate
 * @param {string} outputPath
 */
const buildEntry = (template, importTemplate, outputPath) => {
  const includeComponentTemplate = []

  for (const component of componentsList) {
    includeComponentTemplate.push(
      render(importTemplate, {
        name: component.name,
        path: component.buildPath,
      }),
    )
  }

  const file = render(template, {
    include: includeComponentTemplate.join(EOL),
  })

  writeFileSync(outputPath, file)
}

const replaceTypesExtensions = async () => {
  const options = {
    files: COMPONENTS_TYPE_PATH,
    from: /vue';/g,
    to: "js';",
  }

  await replace(options)
}

const launch = async () => {
  try {
    buildEntry(
      COMPONENTS_TEMPLATE,
      COMPONENTS_IMPORT_TEMPLATE,
      COMPONENTS_OUTPUT_PATH,
    )
    await replaceTypesExtensions()

    logger.success('[BuildComponentEntry] âœ…')
  } catch (error) {
    logger.error(
      '[BuildComponentEntry] ðŸ”´ Error occurred while builing component entry file',
      error,
    )
  }
}

/* eslint-disable unicorn/prefer-top-level-await */
launch()
