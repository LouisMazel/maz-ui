const { writeFileSync } = require('node:fs')
const { componentsList } = require('./get-component-list')
const render = require('json-templater/string')
const { resolve } = require('node:path')
const { EOL } = require('node:os')
const replace = require('replace-in-file')

const COMPONENTS_OUTPUT_PATH = resolve(__dirname, './../components/index.js')
const COMPONENTS_TYPE_PATH = resolve(__dirname, './../components/index.d.ts')

const COMPONENTS_IMPORT_TEMPLATE =
  "import { default as {{name}} } from '{{path}}'"
const COMPONENTS_TEMPLATE = `/* Automatically generated by './build/build-components-entry.js' */

{{include}}

export {
{{list}}
}

export default {
{{list}}
}
`

const buildEntry = (template, importTemplate, outputPath) => {
  const includeComponentTemplate = []
  const listTemplate = []

  for (const component of componentsList) {
    includeComponentTemplate.push(
      render(importTemplate, {
        name: component.name,
        path: component.buildPath,
      }),
    )

    listTemplate.push(`  ${component.name}`)
  }

  const file = render(template, {
    include: includeComponentTemplate.join(EOL),
    list: listTemplate.join(',' + EOL),
  })

  writeFileSync(outputPath, file)
  // eslint-disable-next-line no-console
  console.log('[build entry] DONE:', outputPath)
}

buildEntry(
  COMPONENTS_TEMPLATE,
  COMPONENTS_IMPORT_TEMPLATE,
  COMPONENTS_OUTPUT_PATH,
)

const replaceTypesExtensions = async () => {
  // eslint-disable-next-line no-console
  console.log('COMPONENTS_TYPE_PATH', COMPONENTS_TYPE_PATH)
  const options = {
    files: COMPONENTS_TYPE_PATH,
    from: /vue';/g,
    to: "js';",
  }

  try {
    const results = await replace(options)
    // eslint-disable-next-line no-console
    console.log('Files extensions replaced', results)
  } catch (error) {
    // eslint-disable-next-line no-console
    console.error('Error occurred while replacing file extensions:', error)
  }
}
/* eslint-disable unicorn/prefer-top-level-await */
replaceTypesExtensions()
