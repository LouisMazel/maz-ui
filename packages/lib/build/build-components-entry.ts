import { writeFileSync } from 'node:fs'
import { componentsList } from './get-component-list'
import render from 'json-templater/string'
import { resolve } from 'node:path'
import { EOL } from 'node:os'
import { replaceInFile } from 'replace-in-file'
import { logger } from './logger'

const COMPONENTS_OUTPUT_PATH_MJS = resolve(
  __dirname,
  './../dist/components/index.mjs',
)
const COMPONENTS_OUTPUT_PATH_UMD = resolve(
  __dirname,
  './../dist/components/index.umd.js',
)
const COMPONENTS_TYPE_PATH = resolve(
  __dirname,
  './../dist/components/index.d.ts',
)

const COMPONENTS_TEMPLATE = `/* Automatically generated by './build/build-components-entry.js' */

{{include}}
`

const COMPONENTS_IMPORT_TEMPLATE = `export { default as {{name}} } from '{{path}}'`

const buildEntry = (
  template: string,
  importTemplate: string,
  outputPath: string,
  ext: string,
) => {
  const includeComponentTemplate: string[] = []

  for (const component of componentsList) {
    includeComponentTemplate.push(
      render(importTemplate, {
        name: component.name,
        path: `${component.buildPath}${ext}`,
      }),
    )
  }

  const file = render(template, {
    include: includeComponentTemplate.join(EOL),
  })

  writeFileSync(outputPath, file)
}

const replaceTypesExtensions = () => {
  const options = {
    files: COMPONENTS_TYPE_PATH,
    from: /vue';/g,
    to: "js';",
  }

  return replaceInFile(options)
}

const launch = async () => {
  try {
    buildEntry(
      COMPONENTS_TEMPLATE,
      COMPONENTS_IMPORT_TEMPLATE,
      COMPONENTS_OUTPUT_PATH_MJS,
      '.mjs',
    )
    buildEntry(
      COMPONENTS_TEMPLATE,
      COMPONENTS_IMPORT_TEMPLATE,
      COMPONENTS_OUTPUT_PATH_UMD,
      '.umd.js',
    )
    await replaceTypesExtensions()

    logger.success('[BuildComponentEntry] âœ…')
  } catch (error) {
    logger.error(
      '[BuildComponentEntry] ðŸ”´ Error occurred while builing component entry file',
      error,
    )
  }
}

/* eslint-disable unicorn/prefer-top-level-await */
launch()
