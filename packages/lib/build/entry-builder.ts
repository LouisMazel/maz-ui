import { writeFileSync } from 'node:fs'
import { EOL } from 'node:os'
import { getComponentList } from './get-component-list'
import { logger } from './utils/logger'

export function getEntryComponentTemplate({
  include,
  scriptName,
}: {
  include: string
  scriptName: string
}) {
  return `/* Automatically generated by ./build/${scriptName}.js */

${include}
`
}

export function getComponentImportTemplate({ name, path }: { name: string; path: string }) {
  return `export { default as ${name} } from './${path}'`
}

export async function buildEntry({
  output,
  componentName,
  scriptName,
  extension,
}: {
  componentName: 'name' | 'fullName'
  output: string
  scriptName: string
  extension?: string
}): Promise<void> {
  try {
    const includeComponentTemplate: string[] = []

    const componentsList = await getComponentList()

    for (const component of componentsList) {
      includeComponentTemplate.push(
        getComponentImportTemplate({
          name: component.name,
          path: `${component[componentName]}${extension ?? ''}`,
        }),
      )
    }

    includeComponentTemplate.push(`export * from './types'`)

    const file = getEntryComponentTemplate({
      include: includeComponentTemplate.join(EOL),
      scriptName,
    })

    writeFileSync(output, file)

    logger.success(`[${scriptName}] âœ…`)
  } catch (error) {
    logger.error(
      `[${scriptName}] ðŸ”´ Error occurred while generating package components entry file`,
      error,
    )
  }
}
